#
# Here's how to make a Gruff::Pie.
#
#   g = Gruff::Pie.new
#   g.title = "Visual Pie Graph Test"
#   g.data 'Fries', 20
#   g.data 'Hamburgers', 50
#   g.write("pie_keynote.png")
#
# To control where the pie chart starts creating slices, use {#start_degree=}.
#
class Gruff::Pie < Gruff::Base
  @start_degree: untyped

  @hide_labels_less_than: untyped

  @text_offset_percentage: untyped

  @show_values_as_labels: untyped

  @sort: untyped

  @hide_line_markers: untyped

  @label_formatting: untyped

  @center_labels_over_point: untyped

  @slices: untyped

  @chart_degrees: untyped

  @radius: untyped

  @center_x: untyped

  @center_y: untyped

  DEFAULT_TEXT_OFFSET_PERCENTAGE: ::Float

  # Can be used to make the pie start cutting slices at the top (-90.0)
  # or at another angle. Default is +-90.0+, which starts at 3 o'clock.
  attr_writer start_degree: untyped

  # Set the number output format lambda.
  attr_writer label_formatting: untyped

  # Do not show labels for slices that are less than this percent. Use 0 to always show all labels.
  # Defaults to +0+.
  attr_writer hide_labels_less_than: untyped

  # Affect the distance between the percentages and the pie chart.
  # Defaults to +0.1+.
  attr_writer text_offset_percentage: untyped

  #  Use values instead of percentages.
  attr_writer show_values_as_labels: untyped

  # Set to +true+ if you want the data sets sorted with largest avg values drawn
  # first. Default is +true+.
  attr_writer sort: untyped

  # Can be used to make the pie start cutting slices at the top (-90.0)
  # or at another angle. Default is +-90.0+, which starts at 3 o'clock.
  # @deprecated Please use {#start_degree=} instead.
  def zero_degree=: (untyped value) -> untyped

  private

  def initialize_attributes: () -> untyped

  def setup_drawing: () -> untyped

  def draw_graph: () -> untyped

  def slices: () -> untyped

  def update_chart_degrees_with: (untyped degrees) -> untyped

  def chart_degrees: () -> untyped

  attr_reader graph_height: untyped

  attr_reader graph_width: untyped

  def half_width: () -> untyped

  def half_height: () -> untyped

  def radius: () -> untyped

  def center_x: () -> untyped

  def center_y: () -> untyped

  def distance_from_center: () -> ::Float

  def radius_offset: () -> untyped

  def ellipse_factor: () -> untyped

  def process_label_for: (untyped slice) -> (untyped | nil)

  def label_coordinates_for: (untyped slice) -> ::Array[untyped]

  def x_label_coordinate: (untyped angle) -> untyped

  def y_label_coordinate: (untyped angle) -> untyped

  # Helper Classes
  #
  # @private
  class PieSlice
    attr_accessor total: untyped

    def percentage: () -> untyped

    def degrees: () -> untyped

    private

    def size: () -> untyped
  end
end
